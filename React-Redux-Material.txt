Lab Setup:

1.Node js - latest version
2.vs code 


What is React?

  React is javascript lib for building user interface 

React java script lib like jquery,framework like angular.


What is User interface application?
 
  The user where he interacts , those applications are called user interface applications.

Eg:
  Desktop applications
     if you want to interact with os, shell is primary user interface
     shell in windows, command,powershell,explorer 

  Web Browser:
     It is one of the application software, acts as user interface for web applications

 
 Hand Held devices
  =>Mobile applications
  =>Watch
  =>Tabs
 etc..
....................................................................................
				Types of web app

1.Static Web apps -  1989 to 1995
    built at server end,accessed by clients using browser
    HTML Pages are primary output.

2.Dynamic content web apps - 1996 to till date
    built at server end, access by clients using browser
eg:
  JEE(Servlets,jsp)
  Asp.net
  PHP
 etc.....

3.Web Services -1998 to till
    Data driven apps
     built at server end, accessed by clients  such  as mobiles, client side browser apps.
 SOAP - XML based web service
 RESTFull -  Different format based web service - JSON,XML,PDF....
....................................................................................
			  Client Side Web apps

1.SPA
Single Page Web Apps -  2007 to till date
   built at client side,accessed by clients browsers.
  built using javascript,html 5,css 3 

.....................................................................................
			 React and Web Stack
....................................................................................

React was created to build SPA Web apps by face book at 2013.
....................................................................................
			React and its development model
....................................................................................

By using React what type of apps we can build?

There are three types of apps you can build using react.

1.Single Page Application- SPA - React.js with Redux
2.Full Stack/Server-Side Rendering-SSR - NEXT.JS
3.JAMStack/Static Site Generation-SSG-Like Static web apps- NEXT.JS
....................................................................................
We are going to build SPA.
....................................................................................

				     React

   "React is modern SPA lib created by face book based on "Flux Design Pattern"


Architecture for libs and frameworks:

Plain JS
			 Application(dom) -plain js
			     |
			 Javascript Engine
			      |
			  Browser Engine




Framework/lib
			 Application(JQuery)
			     |
		       ---------------------------
			  JQuery Engine	------javascript programming		
                       -------------------------------
			      |
			 Javascript Engine
			      |
			  Browser Engine



What is jquery engine?
  Jquery engine is also javascript program.




Angular
			 Application(Angular)
			     |
		       ---------------------------
			  Angular Engine : Renderer(Ng2) Renderer2(Ng4,5),Ivy(6,7)		
                       -------------------------------
			      |
			 Javascript Engine
			      |
			  Browser Engine

React


		       Application(React)
			     |
		       ---------------------------
	              React Engine :React fiber-->React 16 on wards		
                       -------------------------------
			      |
			 Javascript Engine
			      |
			  Browser Engine
....................................................................................
		React Future
..................................................................................
React was built by face book only for web browsers, later facebook decided to scale react for building other types of user application (mobile,iot applications).

React can be used to build application for 
........................................
1.browsers : Desktop -  react js
2.Mobile Apps : React Native

face book is working on many futures projects related to react
3.React VR : Virtual Reality.
4.React Car : For car applications
5.React TV  : React for TV.
6.React IOT : any devices
.............................................................................................
				Setup React Project
..............................................................................................

Create React App - tool to setup project
https://create-react-app.dev/

Two ways of setting project 

via npm global modules
via npx modules

via npm:

Install tool:

open cmd:

install tool first

npm install create-react-app -g

create a app
create-react-app my-app

Create project directly without installing create-react-app tool

npx create-react-app my-app
............................................................................................

			React Project layout- created by create-react-app
.............................................................................................

Folder Structure

myapp
 |
 node_modules
 package.json
 package-lock.json
 public 
 src
 readme.md


node_modules
  It is folder contains all libs files and folders downloaded from internet.
  React lib has been downloaded and kept inside this folder only.

package.json
   Every javascript project(it can be any js project), has package.json file  
   This file contains information about the project

Basic information:
 ->Name of the application "name" :"myapp"
 ->version of the application "version": "1.0.0"
 ->dedendencies
     libs  required for dev ,testing, production
    you can understand what version of lib is used in the current project
 ->scripts
     scripts contains information about how to start dev server,testing,production build.

package-lock.json:
  This file used by dev ops tools.


public 
  index.html
  This is entry file in react application.
  without this file we cant start the application

src
 |
 index.js
  App.js
 This folder contains application code files.

readme.md
   this is documentation file
.....................................................................................
				  HTML

HTML is core language for building any type of web apps.

static - html page is created at server and sent to browsers
dynamic -  html page is created at server by the programs on fly,sent to browser
spa - html page is created at client side on fly and rendered in the client itself using javascript.
ssr - html page is create at server side on fly,and lazy at client side using js .
ssg - html pages are created during build time and sent to browsers
.....................................................................................
			   DOM programming 

What is DOM?
  Document Object model, which is spec to build and modify html pages on fly.

Object oriented HTML, HTML elements are represented as objects.

eg:
 H1 - Object
div - Object
 p  - Object

DOM helps to create DOM onfly to attach on existing document

..........................................................................................
				HTML works internally
.............................................................................................

HTML:

1.HTML IS PL? - YES
2.HTML Is compiled -YES
3.HTML is excuted-YES

java
 -source .java
 -compile -.class -assembly
 -excute -jvm--result

index.html -source code
  html code is organized as hierachal model -  hierachial datastructure
<html>
<head></head>
<title><title>
<body>
  <div>
     <h1>Welcome</h1>
  </div>
</body>
</html>

Layout/Paint Engine: will convert nodes into pxs : final output
..............................................................................................
				Dynamic HTML - Inside Web Browser
.............................................................................................

Once the html has been rendered by the web browser, can we change the html(adding new element,updating existing element content,removing node,listing nodes).

The company called Netscap communcation, the second web browser creator after line mode web browser.

The NetsCap communication introduced the browser called netscap navigator , today firefox.

The netscap introduced a new technology called how to change html after rendering.

In 1996,Netscap communication,Started an RND project called "How to manipulate the tree"

Tree is written in c language,then we need another c program to communicate.

But NETSCAP decided not to use C pl.

Netscap wanted to put java like implementation inside browser to manipulate "Tree".

                        "The birth of Javascript"

How to access nodes from javascript engine?
  
One spec was published ,As per that spec
 "Document Object Model"
    -How to represent document(elements/nodes) in object oriented way.->DOM

 "Documents can be reprsented as Objects" : Object oriented Document Programming.
............................................................................................
How dom works?

index.html           Broser runtime(C program)         Javascript Engine
<h1>Hello</h1>       h1-Node                           h1- Object
			Hello-Node			 Hello Object Property



                 Every Html ELEMENT Inside Browser is "C Program"

	       Every Html ELEMENT javascript engine is "Object"


javascript developer ---->uses api --->to communicate Object---->js engine---->browser engine.	*******************************************************************************************	

Who and when "H1" object is created?

if you want to create object?

 class/ function

function Employee(){}  let emp = new Employee()


<h1> => function HTMLHeadingElement(){} => let h =new HTMLHeadingElement() ?



if you want to create object?

 class/ function

function Employee(){}  let emp = new Employee()

<h1> => function HTMLHeadingElement(){} => let h =new HTMLHeadingElement() ?

Note: For html elements, we cant create object directly, rather than JS Engine will create objects , return references to the developer to access.

How via factory Objects: object helps to get other documents

Factory Object : HTML Document =>body

document.getElementById();
   |
Implicit object reference variable which points HTMLDocument OBject.


What is our objective here? DOM Programming?


Enter into DOM programming:

1.write dom programming using javascript language.

<body>
  |
HTMLDocument : body : factory Object


Document apis:

Finding HTML Elements:
......................

HTMLElement document.getElementById(id)	       Find an element by element id
HTMLElement Document document.getElementsByTagName(name)	Find elements by tag name
HTMLElement document.getElementsByClassName(name)	Find elements by class name
HTMLElement document.querySelectory(selector)        find element/elements by selector


Changing HTML Elements : update existing element
......................
element.innerHTML =  new html content	Change the inner HTML of an element
element.attribute = new value	Change the attribute value of an HTML element
element.style.property = new style	Change the style of an HTML element
Method	Description
element.setAttribute(attribute, value)	Change the attribute value of an HTML element

Adding and Deleting Elements:


document.createElement(element)	Create an HTML element
document.removeChild(element)	Remove an HTML element
document.appendChild(element)	Add an HTML element
document.replaceChild(new, old)	Replace an HTML element
.............................................................................................
				DOM Programming
.............................................................................................

How to implement dom programming?

1.using plain js
  if we use plain js , it is very difficult to build large applications

2.using frameworks and libs

2000 - The first javascript framework - DOJO
2002-2005 - JQuery - is the second most powerfull dom lib.
After 2006 - many js libs and frameworks introduced.....
.....................................................................................

.............................................................................................
			How to create dom node , attach on existing tree
				using plain js

				
Note : 
 index.js

//How to create simple element using plain javascript

function createElement() {
    let Heading = document.createElement('h1')
    console.log(Heading)
    Heading.innerHTML = "Hello React!"
    let rootElement = document.getElementById('root')
    rootElement.appendChild(Heading)
}
createElement()
.............................................................................................
			How to create dom node , attach on existing tree
				using react.js


import React from 'react';
import ReactDOM from 'react-dom/client';


//create react element
const Heading = <h1>Hello React!</h1>

//attach that react element with existing tree 
const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(Heading)

The code above , we can see mixure of javascript and html.

How browser understands this code coimbination?

  The browser never understands this code directly.

What is this code is all about?
    
 Face book created a mini /small language for building react application - JSX language

..............................................................................................
				 Components
.............................................................................................

What is Component?
   Component  is nothing but "Object".

Component term introduced by MicroSoft in 1980s. According to Microsoft Component is object which is having "state(variables),behaviours(methods),User Interface(visual Representation)".

Component represents User Interface
Component is Object which represents User Interface.
User interface in browser is represented by HTML element or elements

Component can be represented some time , the object which helps to make up the Userinterface(invisible user interface).


element is <h1>Hello</h1>

elements are <div>
               <div>
                   <h1>Hello</h1>
               </div>
             </div>

Plain Object:
 Object without ui is called plain object.
eg:
   function Employee() {
     this.id = 0;
     this.calculate=function(){}
   }

   new Employee()

DOM : Document Object Model
 
Document -  html
Object Model - Representation of HTML elements

Why We use Components model/Architecture?
  
=>Componets are independant objects.
=>Components let you split the UI into independent, reusable pieces, and think about each piece in isolation.
 
Eg : 
 I am creating a component called "tax calculator".
 
lets say i want to use the tax calculator inside my hr application and inside my sale applcation , and purchase application.

.....................................................................................
How to create Components in react?

We have three patterns.

1.Variable Pattern
2.function pattern
3.ES 6 class Pattern


//component creational patterns
//variable pattern
import React from 'react'
import ReactDOM from 'react-dom/client'

//variable pattern 
const Heading = <h1>Hello React!</h1>

const root = ReactDOM.createRoot(document.getElementById('root'))
root.render(Heading)

functions
//component creational patterns
import React from 'react'
import ReactDOM from 'react-dom/client'

//functions pattern 
// function Heading(){
//     return <h1>Hello React</h1>
// }
//es 6 arrow functions 
// const Heading = () => {
//     return <h1>Hello React!</h1>
// }
const Heading = () => <h1>Hello React!</h1>

const root = ReactDOM.createRoot(document.getElementById('root'))
root.render(<Heading></Heading>)
................

Class Pattern:
//component creational patterns
import React from 'react'
import ReactDOM from 'react-dom/client'

//es 6 class Pattern
class Heading extends React.Component {
    //override render method to return react element
    render() {
        return <h1>Hello React!</h1>
    }
}

const root = ReactDOM.createRoot(document.getElementById('root'))
root.render(<Heading></Heading>)
.....................................................................................
..............................................................................................	
				JSX Rules
..............................................................................................

JSX - Javascript and XML

What is JSX?
 JSX is dsl language to create user interfaces

What is relationship with XML?

 Inside JSX , we write javascript code and HTML code only not xml code.

Why the term XML is used?

 When we write JSX code, we need stable mark up standards.

You know very well HTML has weak parser  that means 
 <h1>hello
when run the code , the html parser does not stop rendering hello, it never throws any error

in order to avoid instability code inside jsx during compilation, JSX team adopted XML Parser rules, since XML parser has strong parser

Basic XML  rules:

1.every opened element must be closed
  <h1>Hello</h1>
  <Welcome></Welcome>
 some elements may not have closing tag
  <img /> : image element has no child elements : self closing. 

2. In xml you must have one single root element.
  all elements must be organized under single root element.

 <h1>Welcome to React</h1>
 <p>Path finder</p>

In html what can be root element
 <div>,<span>,all html 5 layout elements header,footer,section,aside...

3.Component names should start with Uppercase,generally would be noun.

EG:

//component creational patterns
import React from 'react'
import ReactDOM from 'react-dom/client'


//jsx rule 1: every opened element must be closed.
const Greeting = ()=> {
    //return <h1>Hello  //=> <h1>Hello</h1>
    //return <img src="" //=> <img src=""/>
}
const root = ReactDOM.createRoot(document.getElementById('root'))
root.render(<Greeting></Greeting>)

import React from 'react'
import ReactDOM from 'react-dom/client'


//jsx rule 2:all elements must be organized under single root element.
// const Greeting = ()=> {
//    return <h1>Rakuten Digitals</h1>
//           <p>React is very nice framework</p>
// }
const Greeting = () => {
    return <div>
        <h1>Rakuten Digitals</h1>
        <p>React is very nice framework</p>
    </div>
}
const root = ReactDOM.createRoot(document.getElementById('root'))
// root.render(<Greeting></Greeting>)
root.render(<Greeting />)


import React from 'react'
import ReactDOM from 'react-dom/client'


//jsx rule 3:Component Name must start with uppercase-Noun

// const greeting = () => {
//     return <div>
//         <h1>Rakuten Digitals</h1>
//         <p>React is very nice framework</p>
//     </div>
// }
const Greeting = () => {
    return <div>
        <h1>Rakuten Digitals</h1>
        <p>React is very nice framework</p>
    </div>
}
const root = ReactDOM.createRoot(document.getElementById('root'))
// root.render(<greeting />)
root.render(<Greeting />)

				 How jsx code gets compiled?

How code gets compiled?

source code: jsx code

function Welcome() {
      return <h1>Welcome To React!</h1>;
}
	|
     babel.js - compiler 
|	
|
compiled code
function Welcome() {
  return React.createElement(
    'h1',
    null,
    'Welcome To React!'
  );
}
|
runtime : react engine
function Welcome() {
  return React.createElement(
    'h1',
    null,
    'Welcome To React!'
  );
}
|
//React.createElement
function createElement(args){
   document.createElement(args); // low level api call
}
.....................................................................................
				Component Composition
.....................................................................................

How to break large ui into smaller and smallar.

Why we need to create components?
 -Resuablity

DRY

How to create Component tree?

Lets look at the below markup and start thinking in the terms of components...

<article>
 <h1>My First Component</h1>
 <ol>
   <li>Components are building blocks</li>
   <li>Components helps to reuse</li>
   <li>Components helps to scale ui</li>
 </ol>
</article>


import React from 'react'
import ReactDOM from 'react-dom/client'


// const Blog = () => {
//     return <article>
//         <h1>React Components</h1>
//         <ol>
//             <li>Components are building blocks</li>
//             <li>Components helps to reuse</li>
//             <li>Components helps to scale ui</li>
//         </ol>
//     </article>
// }

const BlogHeader = () => <h1>React Components</h1>

//React Fragements: Invisible container element used to escape compile time error when if you miss root element

// const BlogList = () => <div>
//     <li>Components are building blocks</li>
//     <li>Components helps to reuse</li>
//     <li>Components helps to scale ui</li>
// </div>
// const BlogList = () => <React.Fragment>
//     <li>Components are building blocks</li>
//     <li>Components helps to reuse</li>
//     <li>Components helps to scale ui</li>
// </React.Fragment> 

//Fragements <> </>
const BlogList = () => <>
    <li>Components are building blocks</li>
    <li>Components helps to reuse</li>
    <li>Components helps to scale ui</li>
</>

const BlogContent = () => <ol>
    <BlogList />
</ol>

const Article = () => <article>
    <BlogHeader />
    <BlogContent />
</article>

const Blog = () => {
    return <>
        <Article />
        <Article />
    </>
}
//entry Component or root component
const App = () => {
    return <div>
        <Blog />
        <Blog />
        <Blog />
        <Blog />
 
    </div>
}

const root = ReactDOM.createRoot(document.getElementById('root'))
root.render(<App />)


Assignment -1:

Build Layouts based on compoenent composition

 App
  |
 Page
   Header
     ->Logo
     ->SearchBar
   Body 
     ->Have three Articles
   Footer
     ->Copyright

....................................................................................
			  Modularzation and Project layout
.....................................................................................

It means to spilt code,and to keep inside folders and files

Is there a recommended way to structure React projects?

React doesn’t have opinions on how you put files into folders. That said there are a few common approaches popular in the ecosystem you may want to consider.

1.Grouping by features or routes - This is recommended
2.Grouping by file types -  This is not recommended for large 
projects


common/
  Avatar.js
  Avatar.css
  APIUtils.js
  APIUtils.test.js
feed/
  index.js
  Feed.js
  Feed.css
  FeedStory.js
  FeedStory.test.js
  FeedAPI.js
profile/
  index.js
  Profile.js
  ProfileHeader.js
  ProfileHeader.css
  ProfileAPI.js


profile,feed,customers,products,payments which are "features"

Grouping by file type

api/
  APIUtils.js
  APIUtils.test.js
  ProfileAPI.js
  UserAPI.js
components/
  Avatar.js
  Avatar.css
  Feed.js
  Feed.css
  FeedStory.js
  FeedStory.test.js
  Profile.js
  ProfileHeader.js
  ProfileHeader.css

..............................................................................................
				  Dynamic Page - Data Binding
..............................................................................................

Types of web

1.static web
   -only html markup,hand coded.
2.dynamic web
   - html is created on fly with data

How to add data in the component /how to bind data in the component?

data can be represented in many ways.

-primitives - numbers,strings,boolean
-objects - literal objects, objects created out of class/function
-arrays - it is also object but collection 

How to bind data inside jsx?

let name='subramanian'

<h1>Hello {name} </h1>

{} -  databinding syntax.

data binding can be
{variable}
{expression} - {10*10} {getValue()} {emp.id}


import React from 'react'
import ReactDOM from 'react-dom/client'


//data binding {}
let name = 'Subramanian Murugan'
const Heading = () => <h1>Hello {name}</h1>

const root = ReactDOM.createRoot(document.getElementById('root'))
root.render(<Heading></Heading>)

Data can be declared for a component in two ways.

1.data is supplied from outside the component.
2.data is supplied within the component


1.Data is supplied from outside the component.

When component receives data from the outside, this pattern is called as "property pattern" / props pattern.

Outside the component means what? What is outside for the component?

YOu know very well , react creates components and assembles them in hierachical order(tree)
in the tree model, the one component called as "parent" component and other components are called child component and sibiling components.

outside means "Parent".

    "Data is supplied from the parent compoent to child component" - Props pattern /Property pattern


eg:
import React from 'react'
import ReactDOM from 'react-dom/client'

//here props is just conventional variable name 
// function Greeting(props) {
//     console.log(props)
//     return <h1>Hello {props.name}</h1>
// }

const Greeting = props => {
    console.log(props)
    return <h1>Hello {props.name}</h1>
}
const App = () => {
    //imperative syntax
    //return Greeting('Subramanian')
    //declarative syntax
    //props or property syntax <Greeting propName="Value" />
    return <Greeting name="Subramanian" />  // => Greeting('Subramanian)
}


const root = ReactDOM.createRoot(document.getElementById('root'))
root.render(<App />)

///////////////////////

More Props
import React from 'react'
import ReactDOM from 'react-dom/client'

const Profile = props => {
    return <div>
        <h3>Id {props.id}</h3>
        <h3>Name {props.name}</h3>
        <h3>Status {props.status ? "Active" : "InActive"}</h3>
    </div>
}
const App = () => {

    return <>
        <h1>Profile Information</h1>
        <Profile id={1} name="Subramanian" status={true} />
        <Profile id={2} name="Karthik" status={true} />
    </>
}


const root = ReactDOM.createRoot(document.getElementById('root'))
root.render(<App />)

....
How to destrcture props and display?
import React from 'react'
import ReactDOM from 'react-dom/client'

//Extract props from the Property object and display
// const Profile = props => {
//     const { id, name, status } = props;
//     return <div>
//         <h3>Id {id}</h3>
//         <h3>Name {name}</h3>
//         <h3>Status {status ? "Active" : "InActive"}</h3>
//     </div>
// }

// const Profile = ({ id, name, status }) => {
//     return <div>
//         <h3>Id {id}</h3>
//         <h3>Name {name}</h3>
//         <h3>Status {status ? "Active" : "InActive"}</h3>
//     </div>
// }

const Profile = ({ id, name, status }) => <div>
    <h3>Id {id}</h3>
    <h3>Name {name}</h3>
    <h3>Status {status ? "Active" : "InActive"}</h3>
</div>

const App = () => {

    return <>
        <h1>Profile Information</h1>
        <Profile id={1} name="Subramanian" status={true} />
        <Profile id={2} name="Karthik" status={true} />
    </>
}


const root = ReactDOM.createRoot(document.getElementById('root'))
root.render(<App />)
..............................................................................................
			What if i dont supply Props to Component -Default Props
.............................................................................................
if you dont pass any property, we can supply default props which saves lot of runtime bugs.

When you design component, it is highly recommended to have default Props- This is best Practice

import React from 'react'
import ReactDOM from 'react-dom/client'

const Profile = props => {
    return <div>
        <h3>Id {props.id}</h3>
        <h3>Name {props.name}</h3>
        <h3>Status {props.status ? "Active" : "InActive"}</h3>
    </div>
}
//default Props
Profile.defaultProps = {
    id: 0,
    name: 'default',
    status: false
}

const App = () => {
    return <>
        <h1>Profile Information</h1>
        <Profile id={1} name="Subramanian" status={true} />
        <Profile id={2} name="Karthik" status={true} />
        <Profile  />
        <Profile name="Ram" />

    </>
}


const root = ReactDOM.createRoot(document.getElementById('root'))
root.render(<App />)
....................................................................................
			  Class compoents and Props

import React from 'react'
import ReactDOM from 'react-dom/client'

// class Profile extends React.Component {
//     render() {
//         return <div>
//             <h3>Id {this.props.id}</h3>
//             <h3>Name {this.props.name}</h3>
//             <h3>Status {this.props.status ? "Active" : "InActive"}</h3>
//         </div>
//     }
// }
class Profile extends React.Component {
    render() {
        const { id, name, status } = this.props
        return <div>
            <h3>Id {id}</h3>
            <h3>Name {name}</h3>
            <h3>Status {status ? "Active" : "InActive"}</h3>
        </div>
    }
}
//default Props
Profile.defaultProps = {
    id: 0,
    name: 'default',
    status: false
}

const App = () => {
    return <>
        <h1>Profile Information</h1>
        <Profile id={1} name="Subramanian" status={true} />
        <Profile id={2} name="Karthik" status={true} />
        <Profile />
        <Profile name="Ram" />

    </>
}


const root = ReactDOM.createRoot(document.getElementById('root'))
root.render(<App />)
....................................................................................
			Object as Prop
...................................................................................
import React from 'react'
import ReactDOM from 'react-dom/client'

// const Profile = props => {
//     return <div>
//         <h3>Id {props.profile.id}</h3>
//         <h3>Name {props.profile.name}</h3>
//         <h3>Status {props.profile.status ? "Active" : "InActive"}</h3>
//     </div>
// }

const Profile = props => {
    const { id, name, status, address: { city } } = props.profile
    return <div>
        <h3>Id {id}</h3>
        <h3>Name {name}</h3>
        <h3>City {city}</h3>
        <h3>Status {status ? "Active" : "InActive"}</h3>
    </div>
}
//default Props
Profile.defaultProps = {
    profile: {
        id: 0,
        name: 'default',
        status: false,
        address: {
            city: 'city'
        }
    }
}
const App = () => {

    let profile = {
        id: 1,
        name: 'Subramanian',
        status: true,
        address: {
            city: 'Coimbatore'
        }
    }

    return <>
        <h1>Profile Information</h1>
        <Profile profile={profile} />
        <Profile/>

    </>
}


const root = ReactDOM.createRoot(document.getElementById('root'))
root.render(<App />)

..............................................................................................
			Property Validation or Property Constraints
.............................................................................................

Javascript is dynamic typed language, meaning that the type of variable is not verified during compile time.

dyamic typed/weak typing

var a=1;
console.log(a) => 1 => type is number

you can reinitalize the with different types
a="hello"
console.log(a) => "hello" => type is string

In c: - Strongly typed  /static typed
int a=10
a="hello" -compile time error 

Type script : Strongly static typed javascript

let a:number =10;
a="hello"


Inside compoent if pass data , can i enforce the react that accept only the type what i want.

Yes , we can do with help of property validator.
Property validator gives only warning , it wont stop rendering incase there is any type error.


in order to write property rule, react provides a separate lib "prop-types"

import React from 'react'
import ReactDOM from 'react-dom/client'
import PropTypes from 'prop-types';

const Profile = props => {
    return <div>
        <h3>Id {props.id}</h3>
        <h3>Name {props.name}</h3>
        <h3>Status {props.status ? "Active" : "InActive"}</h3>
    </div>
}
//property Rules
Profile.propTypes = {
    id: PropTypes.number,
    name:PropTypes.string,
    status:PropTypes.bool
}
//default props
Profile.defultProps = {
    id:0,
    name:'default Name',
    status:false
}

const App = () => {

    return <>
        <h1>Profile Information</h1>
        {/* <Profile id={"1"} name="Subramanian" status={true} /> */}
        <Profile id={1} name="Subramanian" status={true} />
        <Profile />

    </>
}


const root = ReactDOM.createRoot(document.getElementById('root'))
root.render(<App />)
.....................................................................................	
				Prop Drilling
....................................................................................

In Component driven methods, data is passed from the parent to child and child to its child and child as prop manually..


import React from 'react'
import ReactDOM from 'react-dom/client'


const Parent = props => {
    return <>
       <h2>Parent Component</h2>
       <Child1 message={props.message} />
    </>
}
const Child1 = props => {
    return <>
       <h2>Child1 Component</h2>
       <Child2 message={props.message} />
    </>
}
const Child2 = props => {
    return <>
       <h2>Child2 Component</h2>
       <h3>Message : {props.message}</h3>
    </>
}

const App = () => {

    return <>
        <Parent message="hello" />
    </>
}


const root = ReactDOM.createRoot(document.getElementById('root'))
root.render(<App />)

....................................................................................
			 Props Drilling and More Props-Property Rethrow
....................................................................................
import React from 'react'
import ReactDOM from 'react-dom/client'


const Parent = props => {
    return <>
        <h2>Parent Component</h2>
        <Child1 message={props.message} firstName={props.firstName} lastName={props.lastName} />
    </>
}
const Child1 = props => {
    return <>
        <h2>Child1 Component</h2>
        <Child2 message={props.message} firstName={props.firstName} lastName={props.lastName} />
    </>
}
const Child2 = props => {
    return <>
        <h2>Child2 Component</h2>
        <h3>{props.message} {props.firstName} {props.lastName}</h3>
    </>
}

const App = () => {

    return <>
        <Parent message="Hello" firstName="Subramanian" lastName="Murugan" />
    </>
}


const root = ReactDOM.createRoot(document.getElementById('root'))
root.render(<App />)


Look at the above code and see every component need to transfer props manually which makes the code complex.

Solution : 
  Rethrowing the props or Forwarding props using "JSX Spread syntax"

import React from 'react'
import ReactDOM from 'react-dom/client'


const Parent = props => {
    return <>
        <h2>Parent Component</h2>
        {/* <Child1 message={props.message} firstName={props.firstName} lastName={props.lastName} /> */}
        {/* Forwarding Props using jsx spread notation */}
        <Child1 {...props} />
    </>
}
const Child1 = props => {
    return <>
        <h2>Child1 Component</h2>
        {/* Forwarding Props using jsx spread notation  and merging new props */}
        <Child2 {...props} title="Child 2" />
    </>
}
const Child2 = props => {
    return <>
        <h2>{props.title} Component</h2>
        <h3>{props.message} {props.firstName} {props.lastName}</h3>
    </>
}

const App = () => {

    return <>
        <Parent message="Hello" firstName="Subramanian" lastName="Murugan" />
    </>
}


const root = ReactDOM.createRoot(document.getElementById('root'))
root.render(<App />)

..............................................................................................
				What  can be a prop
.............................................................................................

Prop can be 

1.data - numbers,strings,boolean,objects,arrays
2.function - function as prop
3.component /any html element can be prop

Prop can be 

1.static prop - discussed already
2.dynamic prop - to be discussed


Component as Prop
.................

<Container/>  - The component has no child

<Container>  - The component has child
   <Header>    - It is passed as child to Container
</Container>
import React from 'react'
import ReactDOM from 'react-dom/client'


const Card = props => <div>
    {props.children}
</div>

const Avatar = props => {
    return <>
        <p>Name : {props.name}</p>
    </>
}
const App = () => {
    return <>
        <Card>
            {/* Passing Component as props */}
            <Avatar name="Subramanian" />
            <Avatar name="Subramanian" />
            <Avatar name="Subramanian" />
        </Card>
        <Card>
            <h1>Hello</h1>
        </Card>
    </>
}


const root = ReactDOM.createRoot(document.getElementById('root'))
root.render(<App />)
.....................................................................................
				List Rendering-Arrays
.....................................................................................

Simple List:
import React from 'react'
import ReactDOM from 'react-dom/client'

//simple List Rendering
// const NumberList = props => {
//   return <div>
//        {props.nums}
//   </div>
// }
const NumberList = props => {
    return <div>
        <ul>
            {
                props.nums.map(item => {
                    return <li>{item}</li>
                })
            }
        </ul>
    </div>
}

const App = () => {
    let data = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
    return <>
        <NumberList nums={data} />
    </>
}


const root = ReactDOM.createRoot(document.getElementById('root'))
root.render(<App />)

...................................................................................

Complex Data:
import React from 'react'
import ReactDOM from 'react-dom/client'
import { POSTS } from './mock-data/posts'

// const Post = props => {
//     const { posts } = props
//     return <div>
//         {
//             posts.map(post => {
//                 return <div>
//                     <h2>ID {post.id} UserId {post.userId}</h2>
//                     <h3>{post.title}</h3>
//                     <p>{post.body}</p>
//                 </div>
//             })
//         }
//     </div>
// }

// const Post = ({ posts }) => <div>
//     {
//         posts.map(({ userId, id, title, body }) => <div key={id}>
//             <h2>ID {id} UserId {userId}</h2>
//             <h3>{title}</h3>
//             <p>{body}</p>
//         </div>)
//     }
// </div>

const Post = ({ posts }) => <div>
    {
        posts.map(post => <div key={post.id}>
            <PostDetails post={post} />
        </div>)
    }
</div>
// const PostDetails = ({post}) => <>
//     <h2>ID {post.id} UserId {post.userId}</h2>
//     <h3>{post.title}</h3>
//     <p>{post.body}</p>
// </>
const PostDetails = ({ post: { id, userId, title, body } }) => <>
    <h2>ID {id} UserId {userId}</h2>
    <h3>{title}</h3>
    <p>{body}</p>
</>

const App = () => {
    return <>
        <Post posts={POSTS} />
    </>
}


const root = ReactDOM.createRoot(document.getElementById('root'))
root.render(<App />)
....................................................................................
			 Styling in React

Styles are applied to the component in two ways

1.Global Style 
  importing style in index.js file , so that style to be shared across the app

2.Component Specific Style
   Having Component specific styles.


style can be added using 

1.class attribute 
2.style attribute


Note :

<div class="App">

 React will throw warning like below

Warning: Invalid DOM property `class`. Did you mean `className`?
    at div
    at Post (http://localhost:3000/static/js/bundle.js:56:5)
    at App

According jsx, html attributes should not be given directly rather we need to follow the rule called

 "camelCase" 
eg
class = > className
onclick = onClick

List :
accept acceptCharset accessKey action allowFullScreen alt async autoComplete
autoFocus autoPlay capture cellPadding cellSpacing challenge charSet checked
cite classID className colSpan cols content contentEditable contextMenu controls
controlsList coords crossOrigin data dateTime default defer dir disabled
download draggable encType form formAction formEncType formMethod formNoValidate
formTarget frameBorder headers height hidden high href hrefLang htmlFor
httpEquiv icon id inputMode integrity is keyParams keyType kind label lang list
loop low manifest marginHeight marginWidth max maxLength media mediaGroup method
min minLength multiple muted name noValidate nonce open optimum pattern
placeholder poster preload profile radioGroup readOnly rel required reversed
role rowSpan rows sandbox scope scoped scrolling seamless selected shape size
sizes span spellCheck src srcDoc srcLang srcSet start step style summary
tabIndex target title type useMap value width wmode wrap

https://reactjs.org/docs/dom-elements.html

import React from 'react'
import ReactDOM from 'react-dom/client'
import { POSTS } from './mock-data/posts'
import { Header } from './header/Header'

import 'bootstrap/dist/css/bootstrap.css'
import './index.css'
import './App.css'


// const Post = props => {
//     const { posts } = props
//     return <div>
//         {
//             posts.map(post => {
//                 return <div>
//                     <h2>ID {post.id} UserId {post.userId}</h2>
//                     <h3>{post.title}</h3>
//                     <p>{post.body}</p>
//                 </div>
//             })
//         }
//     </div>
// }

// const Post = ({ posts }) => <div>
//     {
//         posts.map(({ userId, id, title, body }) => <div key={id}>
//             <h2>ID {id} UserId {userId}</h2>
//             <h3>{title}</h3>
//             <p>{body}</p>
//         </div>)
//     }
// </div>

const Post = ({ posts }) => <div className="App">
    {
        posts.map(post => <div key={post.id} className="card" style={{ width: '18rem' }}>
            <PostDetails post={post} />
        </div>)
    }
</div>
// const PostDetails = ({post}) => <>
//     <h2>ID {post.id} UserId {post.userId}</h2>
//     <h3>{post.title}</h3>
//     <p>{post.body}</p>
// </>
const PostDetails = ({ post: { id, userId, title, body } }) => <>
    <div class="card-body">
        <h5 className="card-title">id  {id} userId {userId}</h5>
        <h5 className="card-title">{title}</h5>
        <p className="card-body">{body}</p>
    </div>
</>

const App = () => {
    return <>
        <Header>
            <h1>IBM Blog</h1>
        </Header>
        <div className="container">
            <div className="row">
                <div className="col-sm">
                  <Post posts={POSTS} />
                </div>
            </div>
        </div>
    </>
}


const root = ReactDOM.createRoot(document.getElementById('root'))
root.render(<App />)



